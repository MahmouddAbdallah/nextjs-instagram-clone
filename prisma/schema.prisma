// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId()
  name         String
  username     String        @unique
  email        String        @unique
  password     String
  picture      String?
  Post         Post[]
  postId       String?       @db.ObjectId()
  CommentUser  Comment[]     @relation("user")
  CommentLike  CommentLike[]
  PostLike     PostLike[]
  FollowerUser Follow[]      @relation("following")
  Followers    Follow[]      @relation("follower")
  Status       Status[]
  SeeStatus    SeeStatus[]
}

model Post {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId()
  title    String
  user     Users      @relation(fields: [userId], references: [id])
  userId   String     @db.ObjectId()
  image    String
  Comment  Comment[]
  likes    PostLike[]
  createAt DateTime   @default(now())
  updateAt DateTime   @default(now())
}

model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId()
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId()
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  see       Boolean  @default(false)
}

model Comment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId()
  text        String
  post        Post          @relation(fields: [postId], references: [id])
  postId      String        @db.ObjectId()
  user        Users         @relation(fields: [userId], references: [id], name: "user")
  userId      String        @db.ObjectId()
  CommentLike CommentLike[]
}

model CommentLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId()
  user      Users   @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId()
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId()
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId()
  following   Users  @relation(fields: [followingId], references: [id], name: "following")
  followingId String @db.ObjectId()
  follower    Users  @relation(fields: [followerId], references: [id], name: "follower")
  followerId  String @db.ObjectId()
}

model Status {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId()
  Image_status String
  text         String?
  user         Users       @relation(fields: [userId], references: [id])
  userId       String      @db.ObjectId()
  createAt     DateTime    @default(now())
  SeeStatus    SeeStatus[]
}

model SeeStatus {
  id       String @id @default(auto()) @map("_id") @db.ObjectId()
  user     Users  @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId()
  status   Status @relation(fields: [statusId], references: [id])
  statusId String @db.ObjectId()
}
